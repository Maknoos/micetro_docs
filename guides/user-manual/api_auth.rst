.. meta::
   :description: API authentication methods including the login command in Micetro
   :keywords: Micetro's API, Micetro authentication

.. _api-auth:

API Authentication Methods
==========================

There are several ways to authenticate against the Micetro API:

* :ref:`api-login-command`

* :ref:`api-login-headers`

* :ref:`api-login-sso`

.. _api-login-command:

Login Command
-------------

This method is compatible with all versions of Micetro, and all every variant of the Micetro API (SOAP/JSON-RPC/REST). In the REST API, this command is accessible via the URL commands/Login

The Login command requires a server (for the Micetro Central server), username, and password, and it returns a session ID. This session ID should be used for all other API calls via the session parameter.

The Login command and its parameters are fully documented in the standard SOAP API documentation

.. note::
  Remember to configure HTTPS for the mmws and/or _mmwebext sites when using this authentication method to prevent usernames and passwords from being intercepted during communication.

.. _api-login-headers:

Authorization Headers
---------------------

It's possible to authenticate via HTTP headers by adding a Basic Authorization header or a Negotiate Authorization header, if supported bye the client.

.. note::
  If AuthorizationMethods is not defined in the preference file, mmWS will only accept Basic Authorization.

Using authorization headers for authentication eliminates the need for the Login command, which makes the session ID unnecessary. The "session" parameter should be omitted entirely from all commands, not just left blank.

This method of authentication allows multiple Micetro Web Interfaces to be deployed behind a load balancer, providing redundancy that is seamless to the API client.

However, session IDs are only valid at the API endpoint where they were generated. Therefore, if an API client using a session ID is redirected to different Web Interface/API Endpoint, it will receive an error indicating that the session ID is invalid or has expired. The client must then log in again to obtain a new session ID before proceeding.

The authorization header authentication method is only available for JSON-RPC and REST APIs, and only if using the Micetro Web Interface as an endpoint (URL is <server>/mmws/api or <server>/mmws/json).


Bearer Authentication
^^^^^^^^^^^^^^^^^^^^^
Bearer authentication, also known as token-based authentication, is a common method for securing Web APIs and is the preferred method for interacting with and authenticating the Micetro APIs.

A bearer token is an encrypted string typically generated by the server following a login request. The token serves as proof of authorization. When making requests to the Micetro API, send this token in the Authorization header:

.. code-block::

  Authorization: Bearer <token>

The Micetro API checks the token's validity. If it is valid, the client is granted access to the requested resource.

Ensure that your Micetro endpoints use HTTPS to prevent interception of usernames and passwords during communication.

For more information about Bearer Authentication, see ???


Basic Authentication
^^^^^^^^^^^^^^^^^^^^

For Basic Authentication, simply include a HTTP header like:

.. code-block::

  Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

where the last part is ``<user name>:<password>``, base64 encoded

For more information on Basic Authorization headers on the client side, see for example here: https://en.wikipedia.org/wiki/Basic_access_authentication

.. note::
  Remember to configure HTTPS for the mmws site for this authentication method since the username and password can easily be extracted for anyone listening in on the communication.

Negotiate Authentication
^^^^^^^^^^^^^^^^^^^^^^^^

Negotiate header Authorization, based on `SPNEGO <https://en.wikipedia.org/wiki/SPNEGO>`_ (Simple and Protected GSSAPI Negotiation Mechanism) for Kerberos and NTLM HTTP Authentication, is supported if suppored by the client supports and enabled in the Micetro Web Interface.

With this method, the username and password are not included in the header; instead the API call is made within the security context of the invoking user. In essence, this serves as the single sign-on authentication method provided by the Micetro Web Interface.

To enable Negotiate header Authorization in the Micetro Web Interface, add the following line to the ``preferences.cfg`` and restart the ``mmws`` service.

.. code-block::

  <AuthorizationMethods value="Kerberos,NTLM" />

You can change the order of the methods, for example, if NTLM is preferred over Kerberos. However, if you want to avoid using NTLM as a less secure fallback, specify only Kerberos as
a value.

.. _api-login-sso:

Single Sign-On
--------------

To enable single sign-on in the web application, make sure that Single Sign-on and Single Sign-on for web is enabled in Micetro. See :ref:`external-auth`.

..
  When using M&M Web Services as an API endpoint, refer to the Negotiate header Authorization section above.
  When using the M&M Web Extension that comes with the M&M Web Interface as an API endpoint, single sign-on is achieved by invoking a POST http request to
  .. code-block::
    http://<web server>/_mmwebext/mmwebext.dll?RequestSSO
  The body of the http request should include simply the M&M Central server name.
  If IIS is correctly configured (see :ref:`disable-kernel-mode-auth`), this request will return an XML similar to what the Login SOAP command would return:
  .. code-block:: XML
    <?xml version="1.0" encoding="utf-8"?><soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
      <soap:Body>
          <LoginResponse xmlns="http://menandmice.com/webservices/">
              <session>UzL9uSNNcLjmlRx1PQsP</session>
              <userName>mydomain\myuser</userName>
          </LoginResponse>
      </soap:Body>
    </soap:Envelope>
  The *session* should then be used for all subsequent API commands.
